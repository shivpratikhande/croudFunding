{"version":3,"file":"index.cjs.js","sources":["../src/constants/values.ts","../src/constants/events.ts","../src/utils/misc.ts","../src/utils/globals.ts","../src/providers/polkadot.ts","../src/providers/eip155.ts","../src/providers/solana.ts","../src/providers/cosmos.ts","../src/providers/algorand.ts","../src/providers/cardano.ts","../src/providers/elrond.ts","../src/providers/multiversx.ts","../src/providers/near.ts","../src/providers/generic.ts","../src/UniversalProvider.ts","../src/index.ts"],"sourcesContent":["export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.org\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n\nexport const RPC_URL = \"https://rpc.walletconnect.org/v1/\";\n\nexport const GENERIC_SUBPROVIDER_NAME = \"generic\";\n\nexport const BUNDLER_URL = `${RPC_URL}bundler`;\n","export const PROVIDER_EVENTS = {\n  DEFAULT_CHAIN_CHANGED: \"default_chain_changed\",\n};\n","import { SessionTypes } from \"@walletconnect/types\";\nimport {\n  isCaipNamespace,\n  isValidObject,\n  mergeArrays,\n  parseChainId,\n  parseNamespaceKey,\n} from \"@walletconnect/utils\";\nimport { RPC_URL } from \"../constants\";\nimport { Namespace, NamespaceConfig } from \"../types\";\nimport { merge } from \"lodash\";\n\nexport function getRpcUrl(chainId: string, rpc: Namespace, projectId?: string): string | undefined {\n  const chain = parseChainId(chainId);\n  return (\n    rpc.rpcMap?.[chain.reference] ||\n    `${RPC_URL}?chainId=${chain.namespace}:${chain.reference}&projectId=${projectId}`\n  );\n}\n\nexport function getChainId(chain: string): string {\n  return chain.includes(\":\") ? chain.split(\":\")[1] : chain;\n}\n\nexport function validateChainApproval(chain: string, chains: string[]): void {\n  if (!chains.includes(chain)) {\n    throw new Error(\n      `Chain '${chain}' not approved. Please use one of the following: ${chains.toString()}`,\n    );\n  }\n}\n\nexport function getChainsFromApprovedSession(accounts: string[]): string[] {\n  return accounts.map((address) => `${address.split(\":\")[0]}:${address.split(\":\")[1]}`);\n}\n\nexport function getAccountsFromSession(namespace: string, session: SessionTypes.Struct): string[] {\n  // match namespaces e.g. eip155 with eip155:1\n  const matchedNamespaceKeys = Object.keys(session.namespaces).filter((key) =>\n    key.includes(namespace),\n  );\n  if (!matchedNamespaceKeys.length) return [];\n  const accounts: string[] = [];\n  matchedNamespaceKeys.forEach((key) => {\n    const accountsForNamespace = session.namespaces[key].accounts;\n    accounts.push(...accountsForNamespace);\n  });\n  return accounts;\n}\n\nexport function mergeRequiredOptionalNamespaces(\n  required: NamespaceConfig = {},\n  optional: NamespaceConfig = {},\n) {\n  const requiredNamespaces = normalizeNamespaces(required);\n  const optionalNamespaces = normalizeNamespaces(optional);\n  return merge(requiredNamespaces, optionalNamespaces);\n}\n\n/**\n * Converts\n * {\n *  \"eip155:1\": {...},\n *  \"eip155:2\": {...},\n * }\n * into\n * {\n *  \"eip155\": {\n *      chains: [\"eip155:1\", \"eip155:2\"],\n *      ...\n *    }\n * }\n *\n */\nexport function normalizeNamespaces(namespaces: NamespaceConfig): NamespaceConfig {\n  const normalizedNamespaces: NamespaceConfig = {};\n  if (!isValidObject(namespaces)) return normalizedNamespaces;\n\n  for (const [key, values] of Object.entries(namespaces)) {\n    const chains = isCaipNamespace(key) ? [key] : values.chains;\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const rpcMap = values.rpcMap || {};\n    const normalizedKey = parseNamespaceKey(key);\n    normalizedNamespaces[normalizedKey] = {\n      ...normalizedNamespaces[normalizedKey],\n      ...values,\n      chains: mergeArrays(chains, normalizedNamespaces[normalizedKey]?.chains),\n      methods: mergeArrays(methods, normalizedNamespaces[normalizedKey]?.methods),\n      events: mergeArrays(events, normalizedNamespaces[normalizedKey]?.events),\n      rpcMap: { ...rpcMap, ...normalizedNamespaces[normalizedKey]?.rpcMap },\n    };\n  }\n  return normalizedNamespaces;\n}\n\nexport function parseCaip10Account(caip10Account: string): string {\n  return caip10Account.includes(\":\") ? caip10Account.split(\":\")[2] : caip10Account;\n}\n\n/**\n * Populates the chains array for each namespace with the chains extracted from the accounts if are otherwise missing\n */\nexport function populateNamespacesChains(\n  namespaces: SessionTypes.Namespaces,\n): Record<string, SessionTypes.Namespace> {\n  const parsedNamespaces: Record<string, SessionTypes.Namespace> = {};\n  for (const [key, values] of Object.entries(namespaces)) {\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const accounts = values.accounts || [];\n    // If the key includes a CAIP separator `:` we know it's a namespace + chainId (e.g. `eip155:1`)\n    const chains = isCaipNamespace(key)\n      ? [key]\n      : values.chains\n      ? values.chains\n      : getChainsFromApprovedSession(values.accounts);\n    parsedNamespaces[key] = {\n      chains,\n      methods,\n      events,\n      accounts,\n    };\n  }\n  return parsedNamespaces;\n}\n\nexport function convertChainIdToNumber(chainId: string | number): number | string {\n  if (typeof chainId === \"number\") return chainId;\n  if (chainId.includes(\"0x\")) {\n    return parseInt(chainId, 16);\n  }\n\n  chainId = chainId.includes(\":\") ? chainId.split(\":\")[1] : chainId;\n  return isNaN(Number(chainId)) ? chainId : Number(chainId);\n}\n","const globals = {};\nexport const getGlobal = (key: string) => {\n  return globals[key];\n};\n\nexport const setGlobal = (key: string, value: unknown) => {\n  globals[key] = value;\n};\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\n\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass PolkadotProvider implements IProvider {\n  public name = \"polkadot\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default PolkadotProvider;\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\nimport EventEmitter from \"events\";\nimport { BUNDLER_URL, PROVIDER_EVENTS } from \"../constants\";\nimport { formatJsonRpcRequest } from \"@walletconnect/jsonrpc-utils\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = parseInt(this.getDefaultChain());\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as unknown as T;\n      case \"eth_accounts\":\n        return this.getAccounts() as unknown as T;\n      case \"wallet_switchEthereumChain\": {\n        return (await this.handleSwitchChain(args)) as unknown as T;\n      }\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain()) as unknown as T;\n      case \"wallet_getCapabilities\":\n        return (await this.getCapabilities(args)) as unknown as T;\n      case \"wallet_getCallsStatus\":\n        return (await this.getCallStatus(args)) as unknown as T;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(parseInt(chainId), rpcUrl);\n    }\n    this.chainId = parseInt(chainId);\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: number,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc =\n      rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n\n  private setHttpProvider(chainId: number, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChain = parseInt(getChainId(chain));\n      http[parsedChain] = this.createHttpProvider(parsedChain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = this.chainId;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private async handleSwitchChain(args: RequestParams): Promise<any> {\n    let hexChainId = args.request.params ? args.request.params[0]?.chainId : \"0x0\";\n    hexChainId = hexChainId.startsWith(\"0x\") ? hexChainId : `0x${hexChainId}`;\n    const parsedChainId = parseInt(hexChainId, 16);\n    // if chainId is already approved, switch locally\n    if (this.isChainApproved(parsedChainId)) {\n      this.setDefaultChain(`${parsedChainId}`);\n    } else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) {\n      // try to switch chain within the wallet\n      await this.client.request({\n        topic: args.topic,\n        request: {\n          method: args.request.method,\n          params: [\n            {\n              chainId: hexChainId,\n            },\n          ],\n        },\n        chainId: this.namespace.chains?.[0], // Sending a previously unapproved chainId will cause namespace validation failure so we must set request chainId to the first chainId in the namespace to avoid it\n      } as EngineTypes.RequestParams);\n      this.setDefaultChain(`${parsedChainId}`);\n    } else {\n      throw new Error(\n        `Failed to switch to chain 'eip155:${parsedChainId}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`,\n      );\n    }\n    return null;\n  }\n\n  private isChainApproved(chainId: number): boolean {\n    return this.namespace.chains.includes(`${this.name}:${chainId}`);\n  }\n\n  private async getCapabilities(args: RequestParams) {\n    // if capabilities are stored in the session, return them, else send the request to the wallet\n    const address = args.request?.params?.[0];\n    if (!address) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n    const session = this.client.session.get(args.topic);\n    const sessionCapabilities = session?.sessionProperties?.capabilities || {};\n    if (sessionCapabilities?.[address]) {\n      return sessionCapabilities?.[address];\n    }\n    // intentionally omit catching errors/rejection during `request` to allow the error to bubble up\n    const capabilities = await this.client.request(args as EngineTypes.RequestParams);\n    try {\n      // update the session with the capabilities so they can be retrieved later\n      await this.client.session.update(args.topic, {\n        sessionProperties: {\n          ...(session.sessionProperties || {}),\n          capabilities: {\n            ...(sessionCapabilities || {}),\n            [address]: capabilities,\n          } as any, // by spec sessionProperties should be <string, string> but here are used as objects?\n        },\n      });\n    } catch (error) {\n      console.warn(\"Failed to update session with capabilities\", error);\n    }\n    return capabilities;\n  }\n\n  private async getCallStatus(args: RequestParams) {\n    const session = this.client.session.get(args.topic);\n    const bundlerName = session.sessionProperties?.bundler_name;\n    if (bundlerName) {\n      const bundlerUrl = this.getBundlerUrl(args.chainId, bundlerName);\n      try {\n        return await this.getUserOperationReceipt(bundlerUrl, args);\n      } catch (error) {\n        console.warn(\"Failed to fetch call status from bundler\", error, bundlerUrl);\n      }\n    }\n    const customUrl = session.sessionProperties?.bundler_url;\n    if (customUrl) {\n      try {\n        return await this.getUserOperationReceipt(customUrl, args);\n      } catch (error) {\n        console.warn(\"Failed to fetch call status from custom bundler\", error, customUrl);\n      }\n    }\n\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n\n    throw new Error(\"Fetching call status not approved by the wallet.\");\n  }\n\n  private async getUserOperationReceipt(bundlerUrl: string, args: RequestParams) {\n    const url = new URL(bundlerUrl);\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(\n        formatJsonRpcRequest(\"eth_getUserOperationReceipt\", [args.request.params?.[0]]),\n      ),\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch user operation receipt - ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  private getBundlerUrl(cap2ChainId: string, bundlerName: string) {\n    return `${BUNDLER_URL}?projectId=${this.client.core.projectId}&chainId=${cap2ChainId}&bundler=${bundlerName}`;\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass CosmosProvider implements IProvider {\n  public name = \"cosmos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default CosmosProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\n\nclass AlgorandProvider implements IProvider {\n  public name = \"algorand\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc =\n        rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default AlgorandProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal } from \"../utils\";\n\nclass CardanoProvider implements IProvider {\n  public name = \"cip34\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ------------- PRIVATE -------------- /\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const rpcURL = this.getCardanoRPCUrl(chain);\n      const parsedChain = getChainId(chain);\n      http[parsedChain] = this.createHttpProvider(parsedChain, rpcURL);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private getCardanoRPCUrl(chainId: string): string | undefined {\n    const rpcMap = this.namespace.rpcMap;\n    if (!rpcMap) return undefined;\n    return rpcMap[chainId];\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || this.getCardanoRPCUrl(chainId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default CardanoProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\n// Old wallet connect provider for Elrond\nclass ElrondProvider implements IProvider {\n  public name = \"elrond\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default ElrondProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass MultiversXProvider implements IProvider {\n  public name = \"multiversx\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default MultiversXProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\n\nclass NearProvider implements IProvider {\n  public name = \"near\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default NearProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { GENERIC_SUBPROVIDER_NAME, PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\nimport { parseChainId } from \"@walletconnect/utils\";\n\nclass GenericProvider implements IProvider {\n  public name = GENERIC_SUBPROVIDER_NAME;\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace.chains = [\n      ...new Set((this.namespace.chains || []).concat(namespace.chains || [])),\n    ];\n    this.namespace.accounts = [\n      ...new Set((this.namespace.accounts || []).concat(namespace.accounts || [])),\n    ];\n    this.namespace.methods = [\n      ...new Set((this.namespace.methods || []).concat(namespace.methods || [])),\n    ];\n    this.namespace.events = [\n      ...new Set((this.namespace.events || []).concat(namespace.events || [])),\n    ];\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider(args.chainId).request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace?.accounts?.forEach((account) => {\n      const chain = parseChainId(account);\n      http[`${chain.namespace}:${chain.reference}`] = this.createHttpProvider(account);\n    });\n    return http;\n  }\n\n  private getHttpProvider(chain: string): JsonRpcProvider {\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(chainId: string, rpcUrl?: string): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default GenericProvider;\n","import SignClient, { PROPOSAL_EXPIRY_MESSAGE } from \"@walletconnect/sign-client\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\nimport { getSdkError, isValidArray, parseNamespaceKey } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger, pino } from \"@walletconnect/logger\";\nimport {\n  convertChainIdToNumber,\n  getAccountsFromSession,\n  getChainsFromApprovedSession,\n  mergeRequiredOptionalNamespaces,\n  parseCaip10Account,\n  populateNamespacesChains,\n  setGlobal,\n} from \"./utils\";\nimport PolkadotProvider from \"./providers/polkadot\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport CosmosProvider from \"./providers/cosmos\";\nimport AlgorandProvider from \"./providers/algorand\";\nimport CardanoProvider from \"./providers/cardano\";\nimport ElrondProvider from \"./providers/elrond\";\nimport MultiversXProvider from \"./providers/multiversx\";\nimport NearProvider from \"./providers/near\";\nimport GenericProvider from \"./providers/generic\";\n\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n  PairingsCleanupOpts,\n  ProviderAccounts,\n  AuthenticateParams,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE, PROVIDER_EVENTS, GENERIC_SUBPROVIDER_NAME } from \"./constants\";\nimport EventEmitter from \"events\";\nimport { formatJsonRpcResult } from \"@walletconnect/jsonrpc-utils\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces?: NamespaceConfig;\n  public optionalNamespaces?: NamespaceConfig;\n  public sessionProperties?: Record<string, string>;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session?: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  private shouldAbortPairingAttempt = false;\n  private maxPairingAttempts = 10;\n  private disableProviderPing = false;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n    this.disableProviderPing = opts?.disableProviderPing || false;\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n    expiry?: number | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    if (!this.session) {\n      throw new Error(\"Please call connect() before request()\");\n    }\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session.topic,\n      expiry,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: JsonRpcResult) => void,\n    chain?: string | undefined,\n    expiry?: number | undefined,\n  ): void {\n    const id = new Date().getTime();\n    this.request(args, chain, expiry)\n      .then((response) => callback(null, formatJsonRpcResult(id, response)))\n      .catch((error) => callback(error, undefined as any));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    if (!this.session) {\n      await this.connect({\n        namespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n    }\n    const accounts = await this.requestAccounts();\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.session) {\n      throw new Error(\"Please call connect() before enable()\");\n    }\n    await this.client.disconnect({\n      topic: this.session?.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n    await this.cleanup();\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n    if (opts.skipPairing) return;\n\n    return await this.pair(opts.pairingTopic);\n  }\n\n  public async authenticate(opts: AuthenticateParams, walletUniversalLink?: string) {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n\n    const { uri, response } = await this.client.authenticate(opts, walletUniversalLink);\n    if (uri) {\n      this.uri = uri;\n      this.events.emit(\"display_uri\", uri);\n    }\n    const result = await response();\n    this.session = result.session;\n    if (this.session) {\n      // assign namespaces from session if not already defined\n      const approved = populateNamespacesChains(this.session.namespaces) as NamespaceConfig;\n      this.namespaces = mergeRequiredOptionalNamespaces(this.namespaces, approved);\n      this.persist(\"namespaces\", this.namespaces);\n      this.onConnect();\n    }\n    return result;\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    this.shouldAbortPairingAttempt = false;\n    let pairingAttempts = 0;\n    do {\n      if (this.shouldAbortPairingAttempt) {\n        throw new Error(\"Pairing aborted\");\n      }\n\n      if (pairingAttempts >= this.maxPairingAttempts) {\n        throw new Error(\"Max auto pairing attempts reached\");\n      }\n\n      const { uri, approval } = await this.client.connect({\n        pairingTopic,\n        requiredNamespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n\n      if (uri) {\n        this.uri = uri;\n        this.events.emit(\"display_uri\", uri);\n      }\n\n      await approval()\n        .then((session) => {\n          this.session = session;\n          // assign namespaces from session if not already defined\n          const approved = populateNamespacesChains(session.namespaces) as NamespaceConfig;\n          this.namespaces = mergeRequiredOptionalNamespaces(this.namespaces, approved);\n          this.persist(\"namespaces\", this.namespaces);\n        })\n        .catch((error) => {\n          if (error.message !== PROPOSAL_EXPIRY_MESSAGE) {\n            throw error;\n          }\n          pairingAttempts++;\n        });\n    } while (!this.session);\n    this.onConnect();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      // ignore without active session\n      if (!this.session) return;\n      const [namespace, chainId] = this.validateChain(chain);\n      const provider = this.getProvider(namespace);\n      // @ts-expect-error\n      if (provider.name === GENERIC_SUBPROVIDER_NAME) {\n        provider.setDefaultChain(`${namespace}:${chainId}`, rpcUrl);\n      } else {\n        provider.setDefaultChain(chainId, rpcUrl);\n      }\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(opts: PairingsCleanupOpts = {}): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll();\n\n    if (!isValidArray(inactivePairings)) return;\n\n    for (const pairing of inactivePairings) {\n      if (opts.deletePairings) {\n        this.client.core.expirer.set(pairing.topic, 0);\n      } else {\n        await this.client.core.relayer.subscriber.unsubscribe(pairing.topic);\n      }\n    }\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  public abortPairingAttempt() {\n    this.shouldAbortPairingAttempt = true;\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces = await this.getFromStore(\"namespaces\");\n    this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {};\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.createProviders();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    await this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        core: this.providerOpts.core,\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata,\n        storageOptions: this.providerOpts.storageOptions,\n        storage: this.providerOpts.storage,\n        name: this.providerOpts.name,\n        customStoragePrefix: this.providerOpts.customStoragePrefix,\n        telemetryEnabled: this.providerOpts.telemetryEnabled,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    if (!this.session) {\n      throw new Error(\"Session not initialized. Please call connect() before enable()\");\n    }\n\n    const providersToCreate = [\n      ...new Set(\n        Object.keys(this.session.namespaces).map((namespace) => parseNamespaceKey(namespace)),\n      ),\n    ];\n\n    setGlobal(\"client\", this.client);\n    setGlobal(\"events\", this.events);\n    setGlobal(\"disableProviderPing\", this.disableProviderPing);\n\n    providersToCreate.forEach((namespace) => {\n      if (!this.session) return;\n      const accounts = getAccountsFromSession(namespace, this.session);\n      const approvedChains = getChainsFromApprovedSession(accounts);\n      const mergedNamespaces = mergeRequiredOptionalNamespaces(\n        this.namespaces,\n        this.optionalNamespaces,\n      );\n      const combinedNamespace = {\n        ...mergedNamespaces[namespace],\n        accounts,\n        chains: approvedChains,\n      };\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"algorand\":\n          this.rpcProviders[namespace] = new AlgorandProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[namespace] = new CosmosProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"polkadot\":\n          this.rpcProviders[namespace] = new PolkadotProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"cip34\":\n          this.rpcProviders[namespace] = new CardanoProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"elrond\":\n          this.rpcProviders[namespace] = new ElrondProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"multiversx\":\n          this.rpcProviders[namespace] = new MultiversXProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"near\":\n          this.rpcProviders[namespace] = new NearProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        default:\n          if (!this.rpcProviders[GENERIC_SUBPROVIDER_NAME]) {\n            this.rpcProviders[GENERIC_SUBPROVIDER_NAME] = new GenericProvider({\n              namespace: combinedNamespace,\n            });\n          } else {\n            this.rpcProviders[GENERIC_SUBPROVIDER_NAME].updateNamespace(combinedNamespace);\n          }\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      const { params } = args;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        const accounts = event.data;\n        if (accounts && isValidArray(accounts))\n          this.events.emit(\"accountsChanged\", accounts.map(parseCaip10Account));\n      } else if (event.name === \"chainChanged\") {\n        const requestChainId = params.chainId;\n        const payloadChainId = params.event.data as number;\n        const namespace = parseNamespaceKey(requestChainId);\n        // chainIds might differ between the request & payload - request is always in CAIP2 format, while payload might be string, number, CAIP2 or hex\n        // take priority of the payload chainId\n        const chainIdToProcess =\n          convertChainIdToNumber(requestChainId) !== convertChainIdToNumber(payloadChainId)\n            ? `${namespace}:${convertChainIdToNumber(payloadChainId)}`\n            : requestChainId;\n\n        this.onChainChanged(chainIdToProcess);\n      } else {\n        this.events.emit(event.name, event.data);\n      }\n\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", async (payload) => {\n      await this.cleanup();\n      this.events.emit(\"session_delete\", payload);\n      this.events.emit(\"disconnect\", {\n        ...getSdkError(\"USER_DISCONNECTED\"),\n        data: payload.topic,\n      });\n    });\n\n    this.on(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, (caip2ChainId: string) => {\n      this.onChainChanged(caip2ChainId, true);\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    return this.rpcProviders[namespace] || this.rpcProviders[GENERIC_SUBPROVIDER_NAME];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) => {\n      this.getProvider(namespace).updateNamespace(\n        this.session?.namespaces[namespace] as SessionTypes.BaseNamespace,\n      );\n    });\n  }\n\n  private setNamespaces(params: ConnectParams): void {\n    const { namespaces, optionalNamespaces, sessionProperties } = params;\n\n    if (namespaces && Object.keys(namespaces).length) {\n      this.namespaces = namespaces;\n    }\n    if (optionalNamespaces && Object.keys(optionalNamespaces).length) {\n      this.optionalNamespaces = optionalNamespaces;\n    }\n    this.sessionProperties = sessionProperties;\n    this.persist(\"namespaces\", namespaces);\n    this.persist(\"optionalNamespaces\", optionalNamespaces);\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n    if (!this.namespaces || !Object.keys(this.namespaces).length) return [namespace, chainId];\n    // validate namespace\n    if (namespace) {\n      if (\n        // some namespaces might be defined with inline chainId e.g. eip155:1\n        // and we need to parse them\n        !Object.keys(this.namespaces || {})\n          .map((key) => parseNamespaceKey(key))\n          .includes(namespace)\n      ) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n    if (namespace && chainId) {\n      return [namespace, chainId];\n    }\n    const defaultNamespace = parseNamespaceKey(Object.keys(this.namespaces)[0]);\n    const defaultChain = this.rpcProviders[defaultNamespace].getDefaultChain();\n    return [defaultNamespace, defaultChain];\n  }\n\n  private async requestAccounts(): Promise<string[]> {\n    const [namespace] = this.validateChain();\n    return await this.getProvider(namespace).requestAccounts();\n  }\n\n  private onChainChanged(caip2Chain: string, internal = false): void {\n    if (!this.namespaces) return;\n\n    const [namespace, chainId] = this.validateChain(caip2Chain);\n\n    if (!chainId) return;\n\n    if (!internal) {\n      this.getProvider(namespace).setDefaultChain(chainId);\n    }\n\n    if (this.namespaces[namespace]) {\n      this.namespaces[namespace].defaultChain = chainId;\n    } else if (this.namespaces[`${namespace}:${chainId}`]) {\n      this.namespaces[`${namespace}:${chainId}`].defaultChain = chainId;\n    } else {\n      // @ts-ignore\n      this.namespaces[`${namespace}:${chainId}`] = { defaultChain: chainId };\n    }\n\n    this.persist(\"namespaces\", this.namespaces);\n    this.events.emit(\"chainChanged\", chainId);\n  }\n\n  private onConnect() {\n    this.createProviders();\n    this.events.emit(\"connect\", { session: this.session });\n  }\n\n  private async cleanup() {\n    this.session = undefined;\n    this.namespaces = undefined;\n    this.optionalNamespaces = undefined;\n    this.sessionProperties = undefined;\n    this.persist(\"namespaces\", undefined);\n    this.persist(\"optionalNamespaces\", undefined);\n    this.persist(\"sessionProperties\", undefined);\n    await this.cleanupPendingPairings({ deletePairings: true });\n  }\n\n  private persist(key: string, data: unknown) {\n    this.client.core.storage.setItem(`${STORAGE}/${key}`, data);\n  }\n\n  private async getFromStore(key: string) {\n    return await this.client.core.storage.getItem(`${STORAGE}/${key}`);\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"names":["chainId","rpc","projectId","_a","chain","parseChainId","RPC_URL","accounts","address","namespace","session","matchedNamespaceKeys","key","accountsForNamespace","required","optional","requiredNamespaces","optionalNamespaces","merge","namespaces","_b","_c","_d","normalizedNamespaces","isValidObject","values","chains","isCaipNamespace","methods","events","rpcMap","normalizedKey","parseNamespaceKey","__spreadProps","__spreadValues","p","mergeArrays","caip10Account","parsedNamespaces","globals","value","PolkadotProvider","opts","getGlobal","args","rpcUrl","PROVIDER_EVENTS","account","http","parsedChainId","getChainId","getRpcUrl","JsonRpcProvider","HttpConnection","Eip155Provider","parsedChain","hexChainId","sessionCapabilities","capabilities","error","bundlerName","bundlerUrl","customUrl","url","response","formatJsonRpcRequest","cap2ChainId","BUNDLER_URL","SolanaProvider","CosmosProvider","AlgorandProvider","CardanoProvider","rpcURL","ElrondProvider","MultiversXProvider","NearProvider","GenericProvider","GENERIC_SUBPROVIDER_NAME","UniversalProvider","EventEmitter","pino","getDefaultLoggerOptions","LOGGER","provider","expiry","callback","id","formatJsonRpcResult","getSdkError","walletUniversalLink","uri","result","approved","populateNamespacesChains","mergeRequiredOptionalNamespaces","event","listener","pairingTopic","pairingAttempts","approval","PROPOSAL_EXPIRY_MESSAGE","inactivePairings","isValidArray","pairing","lastKeyIndex","SignClient","RELAY_URL","providersToCreate","setGlobal","getAccountsFromSession","approvedChains","getChainsFromApprovedSession","mergedNamespaces","combinedNamespace","params","parseCaip10Account","requestChainId","payloadChainId","chainIdToProcess","convertChainIdToNumber","topic","_session","payload","caip2ChainId","sessionProperties","defaultNamespace","defaultChain","caip2Chain","internal","data","STORAGE","Provider"],"mappings":"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"}